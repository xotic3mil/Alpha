@model ProjectViewModel

<div class="modal fade"
     id="editProjectModal"
     tabindex="-1"
     aria-labelledby="editProjectModalLabel"
     aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="text-center my-5 px-3">
                <h1 class="modal-title px-3" id="editProjectModalLabel">Edit Project</h1>
            </div>
            <div class="modal-body">
                <div class="container-fluid px-3">
                    <form id="editProjectForm" method="post" enctype="multipart/form-data" action="@Url.Action("Edit", "Project")">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.AntiForgeryToken()

                        <!-- Hidden ID field for edit operations -->
                        <input type="hidden" id="editProjectId" name="Form.Id" />

                        <div class="mb-4">
                            <div class="d-flex flex-column align-items-center">
                                <div class="flex-grow-1 text-center">
                                    <div id="editDropArea"
                                         class="border rounded-circle d-flex flex-column justify-content-center align-items-center mb-3"
                                         style="border-style: dashed !important; cursor: pointer; width: 150px; height: 150px; border-radius: 30px !important;">
                                        <img id="editImagePreview"
                                             src="#"
                                             class="rounded-circle"
                                             alt="Project image preview"
                                             style="width: 150px; height: 150px; object-fit: cover" />
                                        <div id="editDefaultImageIcon" class="d-none">
                                            <svg xmlns="http://www.w3.org/2000/svg"
                                                 width="48"
                                                 height="48"
                                                 fill="grey"
                                                 class="bi bi-camera mb-2"
                                                 viewBox="0 0 16 16">
                                                <path d="M15 12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h1.172a3 3 0 0 0 2.12-.879l.83-.828A1 1 0 0 1 6.827 3h2.344a1 1 0 0 1 .707.293l.828.828A3 3 0 0 0 12.828 5H14a1 1 0 0 1 1 1v6zM2 4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-1.172a2 2 0 0 1-1.414-.586l-.828-.828A2 2 0 0 0 9.172 2H6.828a2 2 0 0 0-1.414.586l-.828.828A2 2 0 0 1 3.172 4H2z" />
                                                <path d="M8 11a2.5 2.5 0 1 1 0-5 2.5 2.5 0 0 1 0 5zm0 1a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7zM3 6.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0z" />
                                            </svg>
                                        </div>
                                    </div>
                                    <input type="file"
                                           id="editProjectImage"
                                           name="ProjectImage"
                                           class="d-none"
                                           accept="image/*" />
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            @Html.LabelFor(m => m.Form.Name, new { @class = "form-label" })
                            <input type="text" id="editProjectName" name="Form.Name" class="form-control formBorder" placeholder="Project name" />
                            <span class="text-danger" data-valmsg-for="Form.Name" data-valmsg-replace="true"></span>
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(m => m.Form.StatusId, new { @class = "form-label" })
                            <select id="editProjectStatusId" name="Form.StatusId" class="form-control formBorder">
                                <option value="">Select Status</option>
                                @foreach (var status in Model.Statuses)
                                {
                                    <option value="@status.Id">@status.StatusName</option>
                                }
                            </select>
                            <span class="text-danger" data-valmsg-for="Form.StatusId" data-valmsg-replace="true"></span>
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(m => m.Form.Description, new { @class = "form-label" })
                            <textarea id="editProjectDescription" name="Form.Description" class="form-control formBorder" placeholder="Brief description of the project"></textarea>
                            <span class="text-danger" data-valmsg-for="Form.Description" data-valmsg-replace="true"></span>
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(m => m.Form.ServiceId, new { @class = "form-label" })
                            <select id="editProjectServiceId" name="Form.ServiceId" class="form-control formBorder">
                                <option value="">Select Service</option>
                                @foreach (var service in Model.Services)
                                {
                                    <option value="@service.Id">@service.ServiceName</option>
                                }
                            </select>
                            <span class="text-danger" data-valmsg-for="Form.ServiceId" data-valmsg-replace="true"></span>
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(m => m.Form.CustomerId, new { @class = "form-label" })
                            <select id="editProjectCustomerId" name="Form.CustomerId" class="form-control formBorder">
                                <option value="">Select Customer</option>
                                @foreach (var customer in Model.Customers)
                                {
                                    <option value="@customer.Id">@customer.CompanyName</option>
                                }
                            </select>
                            <span class="text-danger" data-valmsg-for="Form.CustomerId" data-valmsg-replace="true"></span>
                        </div>

                        <div class="mb-3">
                            <div class="row">
                                <div class="col-md-6">
                                    @Html.LabelFor(m => m.Form.StartDate, new { @class = "form-label" })
                                    <input type="date" id="editProjectStartDate" name="Form.StartDate" class="form-control formBorder" />
                                    <span class="text-danger" data-valmsg-for="Form.StartDate" data-valmsg-replace="true"></span>
                                </div>
                                <div class="col-md-6">
                                    @Html.LabelFor(m => m.Form.EndDate, new { @class = "form-label" })
                                    <input type="date" id="editProjectEndDate" name="Form.EndDate" class="form-control formBorder" />
                                    <span class="text-danger" data-valmsg-for="Form.EndDate" data-valmsg-replace="true"></span>
                                </div>
                            </div>
                        </div>

                        <div class="d-flex justify-content-between mb-5">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="submit" class="btnAuth">Save Changes</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
}

<script src="~/lib/ckeditor5/ckeditor5.js"></script>

<script>
    ClassicEditor.create(document.querySelector('#description'), {
        toolbar: [
            'bold', 'italic', 'underline',
            '|', 'alignment:left', 'alignment:center', 'alignment:right',
            '|', 'bulletedList', 'numberedList', 'link'
        ],
        alignment: {
            options: ['left', 'center', 'right']
        }
    })
    .catch(error => {
        console.error(error);
    });
</script>
@model ProjectViewModel


@{
    ViewData["Title"] = "Project Page";
}
<div class="pt-3">
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3">
        <h1 class="h2">Projects</h1>
        <div class="btn-toolbar">
            <button href="#"
                    data-bs-toggle="modal"
                    data-bs-target="#addProjectModal"
                    type="button"
                    class="btn btnAdd me-2">
                + Add Project
            </button>
        </div>
    </div>
        <ul class="nav mb-4">
            <li class="nav-item">
                <a class="nav-link @(ViewBag.StatusFilter == null || ViewBag.StatusFilter == "All" ? "active" : "")"
                   asp-controller="Project" asp-action="Index">
                    All Projects (@(ViewBag.TotalCount ?? 0))
                </a>
            </li>
            @if (ViewBag.StatusCounts != null)
            {
                @foreach (var statusGroup in ViewBag.StatusCounts)
                {
                    <li class="nav-item">
                        <a class="nav-link @(ViewBag.StatusFilter == statusGroup.Key ? "active" : "")"
                           asp-controller="Project" asp-action="Index" asp-route-statusFilter="@statusGroup.Key">
                            @statusGroup.Key (@statusGroup.Value)
                        </a>
                    </li>
                }
            }
        </ul>
    <div class="row g-3">
            @if (ViewBag.SuccessMessage != null)
            {
                <div class="alert alert-success">
                    @ViewBag.SuccessMessage
                </div>
            }

            @if (!ViewData.ModelState.IsValid)
            {
                <div class="alert alert-danger">
                    <ul>
                        @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                        {
                            <li>@error.ErrorMessage</li>
                        }
                    </ul>
                </div>
            }
             @foreach (var project in Model.Projects)
            {
                <div class="col-12 col-md-9 col-lg-4 col-xl-4 col-xxl-3">
                <div class="card shadow-sm h-100 rounded-4"
                     onclick="openProjectDetails('@project.Id')"
                     style="cursor: pointer;">
                        <div class="card-body">
                            <div class="mb-3">
                                <div class="d-flex flex-wrap align-items-center">
                                    <div class="d-flex align-items-center flex-grow-1 me-2 mb-2 mb-sm-0">
                                        <img src="@(string.IsNullOrEmpty(project.ImageUrl) ? "/images/project-template-1.svg" : project.ImageUrl)"
                                             class="img-fluid rounded-2"
                                             alt="@project.Name"
                                             style="width: 56px; height: 56px;" />
                                        <div class="mx-3">
                                            <h6>@project.Name</h6>
                                            <p class="text-muted">@(project.Customer?.CompanyName)</p>
                                        </div>
                                    </div>
                                <div class="dropdown">
                                    <button class="btn btn-sm btn-link text-muted p-0"
                                            type="button"
                                            data-bs-toggle="dropdown"
                                            aria-expanded="false"
                                            onclick="event.stopPropagation()">
                                        <svg xmlns="http://www.w3.org/2000/svg"
                                             width="20"
                                             height="20"
                                             fill="currentColor"
                                             class="bi bi-three-dots-vertical"
                                             viewBox="0 0 16 16">
                                            <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
                                        </svg>
                                    </button>
                                    <ul class="dropdown-menu dropdown-menu-end shadow-sm">
                                        <li>
                                            <a class="dropdown-item" href="javascript:void(0);" onclick="event.stopPropagation(); openEditProjectModal('@project.Id')">
                                                <i class="bi bi-pencil me-2"></i>Edit Project
                                            </a>
                                        </li>
                                        <li>
                                            <a class="dropdown-item" href="#" onclick="event.stopPropagation();">
                                                <i class="bi bi-person-plus me-2"></i>Add Member
                                            </a>
                                        </li>
                                        <li><hr class="dropdown-divider" /></li>
                                        <li>
                                            <form asp-action="Delete" method="post" class="dropdown-item" onsubmit="event.stopPropagation();">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="id" value="@project.Id" />
                                                <button type="submit" class="btn text-danger p-0" onclick="event.stopPropagation();">
                                                    <i class="bi bi-trash me-2"></i>Delete Project
                                                </button>
                                            </form>
                                        </li>
                                    </ul>
                                </div>
                                </div>
                            </div>
                            <div class="flex-grow-1 mb-3">
                                <p class="card-text text-muted">
                                    @project.Description
                                </p>
                            </div>
                            <div class="d-flex flex-wrap align-items-center gap-2">
                            <div class="time-container d-inline-flex align-items-center">
                                <div class="time">
                                    <div class="d-flex align-items-center">
                                        <img src="/images/clock.svg" alt="clock" class="me-1" />
                                        @{
                                            var daysLeft = Math.Ceiling((project.EndDate.ToDateTime(TimeOnly.MinValue) - DateTime.Now).TotalDays);
                                        }
                                        <span class="text-nowrap">@daysLeft days left</span>
                                    </div>
                                </div>
                            </div>
                            <div class="shadow-sm status-container"
                                 style="background-color: @(string.IsNullOrEmpty(project.Status?.ColorCode) ? "#b3ff0352" : project.Status.ColorCode + "52")">
                                <div class="status d-flex align-items-center">
                                    <div class="status-indicator me-2"
                                         style="background-color: @(string.IsNullOrEmpty(project.Status?.ColorCode) ? "#4caf50" : project.Status.ColorCode);
                                    width: 10px;
                                    height: 10px;
                                    border-radius: 50%;">
                                    </div>
                                    <span>@project.Status?.StatusName</span>
                                </div>
                            </div>
                                <div class="ms-auto">
                                    <img src="/images/avatar-template-1.svg" alt="avatar" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            } 
    </div>
</div>


    @await Html.PartialAsync("_CreateProjectPartial", Model)
    @await Html.PartialAsync("_EditProjectPartial", Model)
    @await Html.PartialAsync("_ProjectDetailsPartial", Model)


@section Scripts {
    <script>
               function openProjectDetails(id) {
            $.ajax({
                url: `/Project/GetProjectByIdWithDetails?id=${id}`,
                type: 'GET',
                dataType: 'json',
                success: function (project) {
                    console.log("Project data:", project); 

                    $('#projectDetailImage').attr('src', project.imageUrl || '/images/project-template-1.svg');
                    $('#projectDetailName').text(project.name || 'Unnamed Project');
                    $('#projectDetailDescription').text(project.description || 'No description available');

                    $('#projectDetailStatus').text(project.status?.statusName || 'No Status');
                    const statusColor = project.status?.colorCode || '#4caf50';
                    $('#projectDetailStatusIndicator').css('background-color', statusColor);
                    $('#projectDetailHeader').css('background-color', statusColor + '15'); 

                    const startDate = project.startDate ? new Date(project.startDate) : null;
                    const endDate = project.endDate ? new Date(project.endDate) : null;

                    $('#projectDetailStartDate').text(startDate ? startDate.toLocaleDateString() : 'Not set');
                    $('#projectDetailEndDate').text(endDate ? endDate.toLocaleDateString() : 'Not set');
                    if (startDate && endDate) {
                        const daysLeft = Math.ceil((endDate - new Date()) / (1000 * 60 * 60 * 24));
                        $('#projectDetailTimeRemaining').text(`${daysLeft} days left`);
                    } else {
                        $('#projectDetailTimeRemaining').text('N/A');
                    }
                    $('#projectDetailBudget').text(project.budget != null ? '$' + project.budget.toLocaleString() : 'N/A');
                    $('#projectDetailService').text(project.service?.serviceName || 'No Service');
                    $('#projectDetailCustomerName').text(project.customer?.companyName || 'No Customer');
                    $('#projectDetailCustomerContact').text(project.customer?.contactName || 'No Contact');
                    $('#projectDetailCustomerEmail').text(project.customer?.email || 'N/A');
                    $('#projectDetailCustomerPhone').text(project.customer?.phoneNumber || 'N/A');

                    const address = [
                        project.customer?.address,
                        project.customer?.city,
                        project.customer?.country
                    ].filter(Boolean).join(', ');
                    $('#projectDetailCustomerAddress').text(address || 'No address available');

                    if (project.customer?.id) {
                        $('#viewCustomerLink').attr('href', `/Customer/Index`);
                    }

                    $('#projectDetailDeleteForm').attr('action', '/Project/Delete');
                    $('#projectDetailDeleteId').val(project.id);

                    $('#projectDetailsModal').data('projectId', project.id);

                    $('#projectDetailsModal').modal('show');
                },
                error: function (error) {
                    console.error('Error fetching project details:', error);
                    alert('Failed to load project details. Please try again.');
                }
            });
        }
    </script>
}

<script>

    function createRipple(event) {
      const button = event.currentTarget;

      const ripple = button.querySelector(".ripple");
      if (ripple) {
        ripple.remove();
      }

      const circle = document.createElement("span");
      const diameter = Math.max(button.clientWidth, button.clientHeight);
      const radius = diameter / 2;

      const rect = button.getBoundingClientRect();
      circle.style.width = circle.style.height = `${diameter}px`;
      circle.style.left = `${event.clientX - rect.left - radius}px`;
      circle.style.top = `${event.clientY - rect.top - radius}px`;
      circle.classList.add("ripple");

      button.appendChild(circle);
    }

    document.addEventListener("DOMContentLoaded", () => {
      const buttons = document.querySelectorAll(
        ".btnAuth, .btnAdd, .btnGoogle, .btn-editor, .btn"
      );

      buttons.forEach((button) => {
        button.classList.add("ripple-button");
        button.addEventListener("mousedown", createRipple);
      });
    });
 </script>




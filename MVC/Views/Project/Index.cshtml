@model ProjectViewModel


@{
    ViewData["Title"] = "Project Page";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] Alpha</title>
    <script type="importmap"></script>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet"
          href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" />
</head>
<body>
<div class="pt-3">
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3">
        <h1 class="h2">Projects</h1>
        <div class="btn-toolbar">
            <button href="#"
                    data-bs-toggle="modal"
                    data-bs-target="#addProjectModal"
                    type="button"
                    class="btn btnAdd me-2">
                + Add Project
            </button>
        </div>
    </div>
        <ul class="nav mb-4 border-bottom">
            <li class="nav-item">
                <a class="nav-link" href="#">
                    <i class="bi bi-grid me-1"></i>All Projects
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#">
                    <i class="bi bi-play-circle me-1"></i>Started
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#">
                    <i class="bi bi-check-circle me-1"></i>Completed
                </a>
            </li>
        </ul>
    <div class="row g-3">
            @if (ViewBag.SuccessMessage != null)
            {
                <div class="alert alert-success">
                    @ViewBag.SuccessMessage
                </div>
            }

            @if (!ViewData.ModelState.IsValid)
            {
                <div class="alert alert-danger">
                    <ul>
                        @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                        {
                            <li>@error.ErrorMessage</li>
                        }
                    </ul>
                </div>
            }
             @foreach (var project in Model.Projects)
            {
                <div class="col-12 col-md-9 col-lg-3">
                    <div class="card shadow-sm h-100 rounded-end-5 rounded-bottom-5">
                        <div class="card-body">
                            <div class="mb-3">
                                <div class="d-flex align-items-center">
                                    <img src="/images/project-template-1.svg"
                                         class="img-fluid"
                                         alt="@project.Name" />
                                    <div class="mx-3">
                                        <h6>@project.Name</h6>
                                        <p class="text-muted">@(project.Customer?.CompanyName)</p>
                                    </div>
                                    <div class="dropdown ms-auto">
                                        <button class="btn btn-sm btn-link text-muted p-0"
                                                type="button"
                                                data-bs-toggle="dropdown"
                                                aria-expanded="false">
                                            <svg xmlns="http://www.w3.org/2000/svg"
                                                 width="20"
                                                 height="20"
                                                 fill="currentColor"
                                                 class="bi bi-three-dots-vertical"
                                                 viewBox="0 0 16 16">
                                                <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
                                            </svg>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end shadow-sm">
                                            <li>
                                                <a class="dropdown-item" href="#">
                                                    <i class="bi bi-pencil me-2"></i>Edit
                                                    Project
                                                </a>
                                            </li>
                                            <li>
                                                <a class="dropdown-item" href="#">
                                                    <i class="bi bi-person-plus me-2"></i>Add
                                                    Member
                                                </a>
                                            </li>
                                            <li><hr class="dropdown-divider" /></li>
                                            <li>
                                                <form asp-action="Delete" method="post" class="dropdown-item">
                                                    @Html.AntiForgeryToken()
                                                    <input type="hidden" name="id" value="@project.Id" />
                                                    <button type="submit" class="btn btn-link text-danger p-0">
                                                        <i class="bi bi-trash me-2"></i>Delete Project
                                                    </button>
                                                </form>
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="flex-grow-1 mb-3">
                                <p class="card-text text-muted">
                                    @project.Description
                                </p>
                            </div>
                            <div class="d-flex">
                                <div class="time-container">
                                    <div class="time">
                                        <div>
                                            <img src="/images/clock.svg" />
                                            <span>@((project.EndDate.ToDateTime(TimeOnly.MinValue) - DateTime.Now).Days) days left</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="ms-2 shadow-sm status-container">
                                    <div class="status">
                                        <span>@project.Status.StatusName</span>
                                    </div>
                                </div>
                                <div class="ms-auto d-flex">
                                    <img src="/images/avatar-template-1.svg" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            } 
    </div>
</div>

<!-- Add Project Modal -->
    @await Html.PartialAsync("_CreateProjectPartial", Model)
</body>
</html>

<script>
          document
            .getElementById("projectImage")
            .addEventListener("change", function (e) {
              handleImageFile(e.target.files[0]);
            });

          document
            .getElementById("dropArea")
            .addEventListener("click", function () {
              document.getElementById("projectImage").click();
            });

          const dropArea = document.getElementById("dropArea");

          ["dragenter", "dragover", "dragleave", "drop"].forEach((eventName) => {
            dropArea.addEventListener(eventName, preventDefaults, false);
          });

          function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
          }

          ["dragenter", "dragover"].forEach((eventName) => {
            dropArea.addEventListener(eventName, highlight, false);
          });

          ["dragleave", "drop"].forEach((eventName) => {
            dropArea.addEventListener(eventName, unhighlight, false);
          });

          function highlight() {
            dropArea.classList.add("bg-light");
          }

          function unhighlight() {
            dropArea.classList.remove("bg-light");
          }

          dropArea.addEventListener("drop", handleDrop, false);

          function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;
            if (files.length && files[0].type.startsWith("image/")) {
              handleImageFile(files[0]);
            }
          }

          function handleImageFile(file) {
            if (file) {
              const reader = new FileReader();
              reader.onload = function (event) {
                const imagePreview = document.getElementById("imagePreview");
                imagePreview.src = event.target.result;
                imagePreview.classList.remove("d-none");
                document.getElementById("defaultImageIcon").classList.add("d-none");
              };
              reader.readAsDataURL(file);
            }
          }

          // Replace your existing rich text editor functionality with this modern approach
          function formatText(command, value = null) {
            const editor = document.getElementById("description");
            editor.focus();

            const selection = window.getSelection();
            const range = selection.getRangeAt(0);

            switch (command) {
              case "bold":
                wrapSelectedText("strong");
                break;
              case "italic":
                wrapSelectedText("em");
                break;
              case "underline":
                wrapSelectedText("u");
                break;
              case "insertUnorderedList":
                if (isSelectionInList()) {
                  unwrapList();
                } else {
                  wrapInList("ul");
                }
                break;
              case "justifyLeft":
                applyAlignment("left");
                break;
              case "justifyCenter":
                applyAlignment("center");
                break;
            }

            // Update hidden textarea
            document.getElementById("description-content").value = editor.innerHTML;
          }

          // Helper function to wrap selected text in a specific HTML tag
          function wrapSelectedText(tagName) {
            const selection = window.getSelection();

            if (selection.rangeCount) {
              const range = selection.getRangeAt(0);

              // Check if we're already wrapped in the same tag
              let parentElement = range.commonAncestorContainer;
              if (parentElement.nodeType === 3) {
                // Text node
                parentElement = parentElement.parentNode;
              }

              // If already formatted with this tag, remove it
              if (
                parentElement.tagName &&
                parentElement.tagName.toLowerCase() === tagName
              ) {
                const content = document.createTextNode(parentElement.textContent);
                parentElement.parentNode.replaceChild(content, parentElement);

                const newRange = document.createRange();
                newRange.setStart(content, 0);
                newRange.setEnd(content, content.length);

                selection.removeAllRanges();
                selection.addRange(newRange);
                return;
              }

              // Create new tag
              const newElement = document.createElement(tagName);

              try {
                range.surroundContents(newElement);
              } catch (e) {
                // Handle case where selection spans multiple nodes
                newElement.appendChild(range.extractContents());
                range.insertNode(newElement);
              }

              // Restore selection
              selection.removeAllRanges();
              selection.addRange(range);
            }
          }

          // Helper function to check if selection is in a list
          function isSelectionInList() {
            const selection = window.getSelection();
            if (selection.rangeCount) {
              let node = selection.anchorNode;
              while (node && node !== document.getElementById("description")) {
                if (node.nodeName === "UL" || node.nodeName === "OL") {
                  return true;
                }
                node = node.parentNode;
              }
            }
            return false;
          }

          // Helper function to wrap selection in a list
          function wrapInList(listType) {
            const editor = document.getElementById("description");
            const selection = window.getSelection();
            const range = selection.getRangeAt(0);

            // Create list and list item
            const list = document.createElement(listType);
            const item = document.createElement("li");

            // Extract selection content and put in list item
            item.appendChild(range.extractContents());
            list.appendChild(item);

            // Insert the list
            range.insertNode(list);

            // Place cursor at end of inserted content
            range.selectNodeContents(item);
            range.collapse(false);
            selection.removeAllRanges();
            selection.addRange(range);
          }

          // Helper function to unwrap list
          function unwrapList() {
            const selection = window.getSelection();
            if (selection.rangeCount) {
              let node = selection.anchorNode;
              while (node && node !== document.getElementById("description")) {
                if (node.nodeName === "UL" || node.nodeName === "OL") {
                  const parent = node.parentNode;

                  // Extract all list items content
                  const fragments = document.createDocumentFragment();
                  Array.from(node.querySelectorAll("li")).forEach((li) => {
                    fragments.appendChild(document.createTextNode(li.textContent));
                    fragments.appendChild(document.createElement("br"));
                  });

                  // Replace list with extracted content
                  parent.replaceChild(fragments, node);
                  return;
                }
                node = node.parentNode;
              }
            }
          }

          // Helper function to apply text alignment
          function applyAlignment(alignment) {
            const selection = window.getSelection();
            const range = selection.getRangeAt(0);

            // Find current paragraph or create one
            let paragraph = range.commonAncestorContainer;
            if (paragraph.nodeType === 3) {
              paragraph = paragraph.parentNode;
            }

            // If not a block element, find the closest block element or create a div
            if (
              window.getComputedStyle(paragraph).display !== "block" &&
              paragraph.id !== "description"
            ) {
              let current = paragraph;
              while (current && current.id !== "description") {
                if (window.getComputedStyle(current).display === "block") {
                  paragraph = current;
                  break;
                }
                current = current.parentNode;
              }

              // If no block element found, wrap in a div
              if (
                paragraph.id === "description" ||
                window.getComputedStyle(paragraph).display !== "block"
              ) {
                const div = document.createElement("div");
                try {
                  range.surroundContents(div);
                  paragraph = div;
                } catch (e) {
                  div.appendChild(range.extractContents());
                  range.insertNode(div);
                  paragraph = div;
                }
              }
            }

            // Set the text alignment
            paragraph.style.textAlign = alignment;
          }

          // Initialize editor when document is ready
          document.addEventListener("DOMContentLoaded", function () {
            // Set up mutation observer to update hidden textarea when content changes
            const editor = document.getElementById("description");
            const observer = new MutationObserver(function () {
              document.getElementById("description-content").value =
                editor.innerHTML;
            });

            observer.observe(editor, {
              childList: true,
              attributes: true,
              characterData: true,
              subtree: true,
            });
          });
 </script>


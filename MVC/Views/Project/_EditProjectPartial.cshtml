@model ProjectViewModel

<div class="modal fade"
     id="editProjectModal"
     tabindex="-1"
     aria-labelledby="editProjectModalLabel"
     aria-hidden="true"
     data-bs-backdrop="static"
     data-bs-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header border-0 position-absolute w-100">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="text-center my-5 px-3">
                <h1 class="modal-title px-3 text-center" id="editProjectModalLabel">Edit Project</h1>
            </div>
            <div class="modal-body">
                <div class="container-fluid px-3">
                    <form id="editProjectForm" method="post" enctype="multipart/form-data" asp-action="Edit" asp-controller="Project" data-validate="true">
                        <div asp-validation-summary="ModelOnly" class="text-danger" id="edit-validation-summary"></div>
                        @Html.AntiForgeryToken()
                        <input type="hidden" id="editProjectId" name="Form.Id" asp-for="Form.Id" />
                        <div class="mb-4">
                            <div class="d-flex flex-column align-items-center">
                                <div class="flex-grow-1 text-center">
                                    <div id="editDropArea" class="position-relative d-flex flex-column justify-content-center align-items-center mb-3"
                                         style="cursor: pointer; width: 150px; height: 150px; border-radius: 30px !important; overflow: hidden;">
                                        <img id="editDefaultProjectImage" src="/images/project-template-1.svg" alt="Default project image"
                                             style="width: 150px; height: 150px; object-fit: cover;" />
                                        <img id="editImagePreview" src="#" class="position-absolute top-0 left-0 d-none" alt="Project image preview"
                                             style="width: 150px; height: 150px; object-fit: cover;" />

                                        <div id="editCameraOverlay" class="position-absolute w-100 h-100 d-flex flex-column justify-content-center align-items-center bg-dark bg-opacity-50 text-white opacity-0"
                                             style="top: 0; left: 0; transition: opacity 0.3s ease;">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" fill="white" class="bi bi-camera mb-2" viewBox="0 0 16 16">
                                                <path d="M15 12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h1.172a3 3 0 0 0 2.12-.879l.83-.828A1 1 0 0 1 6.827 3h2.344a1 1 0 0 1 .707.293l.828.828A3 3 0 0 0 12.828 5H14a1 1 0 0 1 1 1v6zM2 4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-1.172a2 2 0 0 1-1.414-.586l-.828-.828A2 2 0 0 0 9.172 2H6.828a2 2 0 0 0-1.414.586l-.828.828A2 2 0 0 1 3.172 4H2z" />
                                                <path d="M8 11a2.5 2.5 0 1 1 0-5 2.5 2.5 0 0 1 0 5zm0 1a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7zM3 6.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0z" />
                                            </svg>
                                            <span style="font-size: 12px;">Change Image</span>
                                        </div>
                                    </div>
                                    <input type="file" id="editProjectImage" name="ProjectImage" class="d-none" accept="image/*" />
                                    <input type="hidden" id="editImageSelected" name="EditImageSelected" value="false" />
                                    <input type="hidden" id="editCurrentImageUrl" name="Form.ImageUrl" asp-for="Form.ImageUrl" />
                                    <p class="text-muted small">Click to change project image</p>
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label asp-for="Form.Name" class="form-label"></label>
                            <input asp-for="Form.Name" id="editProjectName" name="Form.Name"
                                   class="form-control formBorder"
                                   placeholder="Project name" required
                                   data-val="true" data-val-required="Project name is required" />
                            <span asp-validation-for="Form.Name" class="text-danger field-validation-error" id="editNameError"></span>
                        </div>
                        <div class="mb-3">
                            <label asp-for="Form.StatusId" class="form-label"></label>
                            <select asp-for="Form.StatusId" id="editProjectStatusId" name="Form.StatusId"
                                    class="form-control formBorder"
                                    asp-items="@(new SelectList(Model.Statuses, "Id", "StatusName", Model.Form.StatusId))"
                                    required data-val="true" data-val-required="Status is required">
                                <option value="">Select Status</option>
                            </select>
                            <span asp-validation-for="Form.StatusId" class="text-danger field-validation-error" id="editStatusError"></span>
                        </div>
                        <div class="mb-3">
                            <label asp-for="Form.Description" class="form-label"></label>
                            <textarea asp-for="Form.Description" id="editProjectDescription" name="Form.Description"
                                      class="form-control formBorder"
                                      placeholder="Brief description of the project" required data-val="true"
                                      data-val-required="Description is required" data-quill-editor></textarea>
                            <span asp-validation-for="Form.Description" class="text-danger field-validation-error" id="editDescriptionError"></span>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Team Members</label>
                            <div class="position-relative">
                                <div class="input-group mb-2">
                                    <span class="input-group-text">
                                        <i class="bi bi-search"></i>
                                    </span>
                                    <input type="text" id="editUserSearchInput" class="form-control formBorder" placeholder="Add or remove team members...">
                                </div>
                                <div id="editSelectedMembersContainer" class="d-flex flex-wrap gap-1 mb-2">
                                </div>
                                <div id="editUserSuggestionsContainer"
                                     class="border rounded p-2 formBorder"
                                     style="max-height: 200px; overflow-y: auto; display: none; position: absolute; width: 100%; background: white; z-index: 1050; box-shadow: 0 2px 5px rgba(0,0,0,0.2);">
                                </div>
                                <div id="editSelectedMembersInputs">
                                </div>
                            </div>
                            <span class="text-danger field-validation-error" id="editMembersError"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Form.ServiceId" class="form-label"></label>
                            <select asp-for="Form.ServiceId" id="editProjectServiceId" name="Form.ServiceId"
                                    class="form-control formBorder"
                                    asp-items="@(new SelectList(Model.Services, "Id", "ServiceName", Model.Form.ServiceId))"
                                    required data-val="true" data-val-required="Service is required">
                                <option value="">Select Service</option>
                            </select>
                            <span asp-validation-for="Form.ServiceId" class="text-danger field-validation-error" id="editServiceError"></span>
                        </div>
                        <div class="mb-3">
                            <label asp-for="Form.CustomerId" class="form-label"></label>
                            <select asp-for="Form.CustomerId" id="editProjectCustomerId" name="Form.CustomerId"
                                    class="form-control formBorder"
                                    asp-items="@(new SelectList(Model.Customers, "Id", "CompanyName", Model.Form.CustomerId))"
                                    required data-val="true" data-val-required="Customer is required">
                                <option value="">Select Customer</option>
                            </select>
                            <span asp-validation-for="Form.CustomerId" class="text-danger field-validation-error" id="editCustomerError"></span>
                        </div>
                        <div class="mb-3">
                            <div class="row">
                                <div class="col-md-6">
                                    <label asp-for="Form.StartDate" class="form-label"></label>
                                    <input asp-for="Form.StartDate" id="editProjectStartDate" name="Form.StartDate"
                                           type="date" class="form-control formBorder"
                                           required data-val="true" data-val-required="Start date is required" />
                                    <span asp-validation-for="Form.StartDate" class="text-danger field-validation-error" id="editStartDateError"></span>
                                </div>
                                <div class="col-md-6">
                                    <label asp-for="Form.EndDate" class="form-label"></label>
                                    <input asp-for="Form.EndDate" id="editProjectEndDate" name="Form.EndDate"
                                           type="date" class="form-control formBorder"
                                           required data-val="true" data-val-required="End date is required" />
                                    <span asp-validation-for="Form.EndDate" class="text-danger field-validation-error" id="editEndDateError"></span>
                                </div>
                            </div>
                        </div>
                        <div class="d-flex justify-content-center mb-5">
                            <button type="submit" class="btnAuth" id="editProjectButton">Save Changes</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .member-tag {
        display: inline-flex;
        align-items: center;
        background-color: #f0f0f0;
        border-radius: 20px;
        padding: 4px 10px;
        margin-right: 5px;
        margin-bottom: 5px;
        font-size: 14px;
    }

        .member-tag .avatar {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            margin-right: 8px;
        }

        .member-tag .remove-tag {
            margin-left: 8px;
            cursor: pointer;
            color: #888;
        }

            .member-tag .remove-tag:hover {
                color: #dc3545;
            }

    .user-suggestion {
        padding: 8px 12px;
        cursor: pointer;
        display: flex;
        align-items: center;
    }

        .user-suggestion:hover {
            background-color: #f8f9fa;
        }

        .user-suggestion .avatar {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            margin-right: 10px;
        }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const editUserSearchInput = document.getElementById('editUserSearchInput');
        const editUserSuggestionsContainer = document.getElementById('editUserSuggestionsContainer');
        const editSelectedMembersContainer = document.getElementById('editSelectedMembersContainer');
        const editSelectedMembersInputs = document.getElementById('editSelectedMembersInputs');
        const editDropArea = document.getElementById('editDropArea');
        const editCameraOverlay = document.getElementById('editCameraOverlay');
        const editProjectImage = document.getElementById('editProjectImage');
        const editImagePreview = document.getElementById('editImagePreview');
        const editDefaultProjectImage = document.getElementById('editDefaultProjectImage');
        const editImageSelected = document.getElementById('editImageSelected');

        let editSelectedMembers = [];
        let originalMemberIds = [];

        document.getElementById('editProjectForm').addEventListener('submit', function(e) {
            const projectImageInput = document.getElementById('editProjectImage');
            if (projectImageInput && projectImageInput.files.length === 0) {
                projectImageInput.removeAttribute('name');
            }
    
            const membersContainer = document.getElementById('editSelectedMembersInputs');
            membersContainer.innerHTML = '';
    
            editSelectedMembers.forEach(member => {
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'SelectedMemberIds';
                input.value = member.id;
                membersContainer.appendChild(input);
            });
    
            console.log(`Submitting form with ${editSelectedMembers.length} team members`);
        });

        function showNotification(message, type) {
            if (typeof showSnackbar === 'function') {
                showSnackbar(message, type);
            } else {
                const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';

                const notification = document.createElement('div');
                notification.className = `alert ${alertClass} position-fixed top-0 start-50 translate-middle-x mt-3`;
                notification.style.zIndex = 1060;
                notification.textContent = message;

                document.body.appendChild(notification);

                setTimeout(() => {
                    notification.remove();
                }, 3000);
            }
        }

        function updateMembersDisplay() {
            if (editSelectedMembers.length === 0) {
                const existingMessages = editSelectedMembersContainer.querySelectorAll('.text-muted.small.py-2');
                if (existingMessages.length === 0) {
                    const noMembersMessage = document.createElement('div');
                    noMembersMessage.className = 'text-muted small py-2';
                    noMembersMessage.textContent = 'No team members selected.';
                    editSelectedMembersContainer.appendChild(noMembersMessage);
                }
            } else {
                const existingMessages = editSelectedMembersContainer.querySelectorAll('.text-muted.small.py-2');
                existingMessages.forEach(msg => msg.remove());
            }
        }

        function addMemberToProject(user) {
            const projectId = $('#editProjectId').val() || $('#editProjectModal').data('project-id');

            if (!projectId) {
                showNotification("Project ID is missing. Please try again.", "danger");
                return;
            }

            if (editSelectedMembers.some(member => member.id === user.id)) {
                showNotification("This user is already added to the project.", "warning");
                return;
            }

            addEditSelectedUser(user);
        }

        function confirmRemoveMember(userId, userName, memberTag) {
            if (confirm(`Are you sure you want to remove ${userName} from the team?`)) {
                editSelectedMembers = editSelectedMembers.filter(member => member.id !== userId);
                memberTag.remove();
                updateMembersDisplay();
            }
        }

        function addEditSelectedUser(user) {
            const userId = user.id;
            const userName = user.name || user.fullName || '';
            const userEmail = user.email || '';
            const userAvatar = user.avatarUrl || user.profilePicture || '/images/default-avatar.png';

            if (editSelectedMembers.some(member => member.id === userId)) {
                return;
            }

            editSelectedMembers.push({
                id: userId,
                name: userName,
                email: userEmail,
                avatarUrl: userAvatar
            });

            const memberTag = document.createElement('div');
            memberTag.className = 'member-tag';
            memberTag.dataset.userId = userId;
            memberTag.innerHTML = `
                <img src="${userAvatar}" class="avatar" alt="${userName}">
                <span>${userName}</span>
                <span class="remove-tag">&times;</span>
            `;

            const removeButton = memberTag.querySelector('.remove-tag');
            removeButton.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                confirmRemoveMember(userId, userName, memberTag);
            });

            editSelectedMembersContainer.appendChild(memberTag);
            updateMembersDisplay();
        }

        function loadEditAvailableUsers(projectId) {
            window.availableUsers = [];

            if (editUserSearchInput) {
                editUserSearchInput.placeholder = "Loading users...";
                editUserSearchInput.disabled = true;
            }

            $.ajax({
                url: projectId ?
                    `/ProjectMembership/GetAvailableUsers?projectId=${projectId}` :
                    '/ProjectMembership/GetAvailableUsers',
                type: 'GET',
                success: function(response) {
                    if (editUserSearchInput) {
                        editUserSearchInput.placeholder = "Add team members...";
                        editUserSearchInput.disabled = false;
                    }

                    if (response.success && response.users && response.users.length > 0) {
                        window.availableUsers = response.users;
                        console.log('Available users loaded:', response.users.length);
                    } else {
                        console.warn('No users available or unexpected response format:', response);
                        window.availableUsers = [];
                    }
                },
                error: function(error) {
                    if (editUserSearchInput) {
                        editUserSearchInput.placeholder = "Add team members...";
                        editUserSearchInput.disabled = false;
                    }

                    console.error('Error loading available users:', error);
                    window.availableUsers = [];
                    showNotification("Failed to load available users", "danger");
                }
            });
        }

        function filterAndShowEditSuggestions(searchTerm) {
            if (!window.availableUsers) {
                console.log('No available users to filter');
                return;
            }

            console.log('Filtering users with search term:', searchTerm);
            const filteredUsers = window.availableUsers.filter(user => {
                if (editSelectedMembers.some(m => m.id === user.id)) {
                    return false;
                }

                const userName = user.name || '';
                const userEmail = user.email || '';

                return searchTerm === '' ||
                       userName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                       userEmail.toLowerCase().includes(searchTerm.toLowerCase());
            });

            console.log('Filtered users:', filteredUsers);
            renderEditUserSuggestions(filteredUsers);
        }

        function renderEditUserSuggestions(users) {
            editUserSuggestionsContainer.innerHTML = '';

            if (users.length === 0) {
                editUserSuggestionsContainer.innerHTML = '<div class="p-3 text-center">No matching users found</div>';
                editUserSuggestionsContainer.style.display = 'block';
                return;
            }

            users.forEach(user => {
                const userName = user.name || '';
                const userEmail = user.email || '';
                const userAvatar = user.avatarUrl || '/images/default-avatar.png';

                const suggestionElement = document.createElement('div');
                suggestionElement.className = 'user-suggestion';
                suggestionElement.innerHTML = `
                    <img src="${userAvatar}" class="avatar" alt="${userName}">
                    <div>
                        <div>${userName}</div>
                        <small class="text-muted">${userEmail}</small>
                    </div>
                `;

                suggestionElement.addEventListener('click', function() {
                    addMemberToProject(user);
                    if (editUserSearchInput) {
                        editUserSearchInput.value = '';
                    }
                    editUserSuggestionsContainer.style.display = 'none';
                });

                editUserSuggestionsContainer.appendChild(suggestionElement);
            });

            editUserSuggestionsContainer.style.display = 'block';
        }

        function handleEditImageFile(file) {
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    editImagePreview.src = e.target.result;
                    editImagePreview.classList.remove('d-none');
                    editDefaultProjectImage.classList.add('d-none');
                    editImageSelected.value = 'true';
                };
                reader.readAsDataURL(file);
            }
        }

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        if (editUserSearchInput) {
            console.log('User search input found:', editUserSearchInput);
            $('#editProjectModal').on('shown.bs.modal', function() {
                editUserSearchInput.value = '';
                editUserSuggestionsContainer.style.display = 'none';
            });

            editUserSearchInput.addEventListener('focus', function() {
                if (window.availableUsers && window.availableUsers.length > 0) {
                    const searchTerm = this.value.trim();
                    if (searchTerm.length > 0) {
                        filterAndShowEditSuggestions(searchTerm);
                    } else {
                        filterAndShowEditSuggestions('');
                    }
                }
            });

            editUserSearchInput.addEventListener('input', function(e) {
                const searchTerm = e.target.value.trim();
                if (searchTerm.length > 1) {
                    filterAndShowEditSuggestions(searchTerm);
                } else if (searchTerm.length === 0) {
                    filterAndShowEditSuggestions('');
                } else {
                    editUserSuggestionsContainer.style.display = 'none';
                }
            });
        }

        document.addEventListener('click', function(e) {
            if (editUserSearchInput && !editUserSearchInput.contains(e.target) &&
                !editUserSuggestionsContainer.contains(e.target)) {
                editUserSuggestionsContainer.style.display = 'none';
            }
        });

        $('#editProjectModal').on('show.bs.modal', function(event) {
            try {
                const projectId = sessionStorage.getItem('editProjectId') ||
                                 (event.relatedTarget ? $(event.relatedTarget).data('project-id') : null);

                console.log('Modal opened with project ID:', projectId);

                if (!projectId) {
                    console.error('No project ID found');
                    return;
                }
                $('#editProjectId').val(projectId);
                $(this).data('project-id', projectId);

                editSelectedMembers = [];
                originalMemberIds = [];
                editSelectedMembersContainer.innerHTML = '';
                loadEditAvailableUsers(projectId);

                $.ajax({
                    url: `/Project/GetProjectById?id=${projectId}`,
                    type: 'GET',
                    success: function(project) {
                        document.getElementById('editProjectName').value = project.name || '';

                    if (project.description) {
                        const descriptionField = document.getElementById('editProjectDescription');
                        if (descriptionField) {

                            descriptionField.value = project.description;

                            ensureQuillEditorsInitialized(document.getElementById('editProjectForm'));

                            setTimeout(() => {
                                if (descriptionField.quill) {
                                    descriptionField.quill.clipboard.dangerouslyPasteHTML(project.description);
                                } else {
                                    const editor = document.querySelector(`#editProjectDescription + .ql-container .ql-editor`);
                                    if (editor) {
                                        editor.innerHTML = project.description;
                                    }

                                    if (window.Quill) {
                                        const quillInstance = Quill.find(document.querySelector(`#editProjectDescription + .ql-container`));
                                        if (quillInstance) {
                                            quillInstance.clipboard.dangerouslyPasteHTML(project.description);
                                        }
                                    }
                                }
                            }); 
                        }
                    }

                        if (project.statusId) {
                            $('#editProjectStatusId').val(project.statusId).trigger('change');
                        }

                        if (project.serviceId) {
                            $('#editProjectServiceId').val(project.serviceId).trigger('change');
                        }

                        if (project.customerId) {
                            $('#editProjectCustomerId').val(project.customerId).trigger('change');
                        }

                        if (project.startDate) {
                            $('#editProjectStartDate').val(formatDateForInput(project.startDate));
                        }

                        if (project.endDate) {
                            $('#editProjectEndDate').val(formatDateForInput(project.endDate));
                        }

                        if (project.imageUrl) {
                            $('#editCurrentImageUrl').val(project.imageUrl);
                            editImagePreview.src = project.imageUrl;
                            editImagePreview.classList.remove('d-none');
                            editDefaultProjectImage.classList.add('d-none');
                        }
                    },
                    error: function(error) {
                        console.error('Error loading project details:', error);
                        showNotification('Failed to load project details', 'danger');
                    }
                });

                $.ajax({
                    url: `/ProjectMembership/GetProjectMembers?projectId=${projectId}`,
                    type: 'GET',
                    dataType: 'json',
                    success: function(response) {
                        console.log('Project members loaded:', response);

                        if (response.success && response.members && response.members.length > 0) {
                            response.members.forEach(member => {
                                const memberId = member.id || member.userId;
                                originalMemberIds.push(memberId);

                                addEditSelectedUser({
                                    id: memberId,
                                    name: member.name || member.userName || `${member.firstName || ''} ${member.lastName || ''}`.trim(),
                                    email: member.email || '',
                                    avatarUrl: member.avatarUrl || member.profilePicture || '/images/default-avatar.png'
                                });
                            });
                        }
                        updateMembersDisplay();
                    },
                    error: function(error) {
                        console.error('Error loading project members:', error);
                        showNotification("Failed to load team members", "danger");
                        updateMembersDisplay();
                    }
                });
            } catch (error) {
                console.error('Error in modal show event:', error);
            }
        });

        if (editDropArea) {
            editDropArea.addEventListener('mouseover', function() {
                editCameraOverlay.style.opacity = '1';
            });

            editDropArea.addEventListener('mouseout', function() {
                editCameraOverlay.style.opacity = '0';
            });

            editDropArea.addEventListener('click', function() {
                editProjectImage.click();
            });

            editProjectImage.addEventListener('change', function() {
                handleEditImageFile(this.files[0]);
            });

            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                editDropArea.addEventListener(eventName, preventDefaults, false);
            });

            ['dragenter', 'dragover'].forEach(eventName => {
                editDropArea.addEventListener(eventName, function() {
                    editCameraOverlay.style.opacity = '1';
                }, false);
            });

            ['dragleave', 'drop'].forEach(eventName => {
                editDropArea.addEventListener(eventName, function() {
                    editCameraOverlay.style.opacity = '0';
                }, false);
            });

            editDropArea.addEventListener('drop', function(e) {
                const dt = e.dataTransfer;
                const file = dt.files[0];
                handleEditImageFile(file);
            }, false);
        }

        function formatDateForInput(dateString) {
            const date = new Date(dateString);
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }

        function ensureQuillEditorsInitialized(form) {
            if (typeof window.initQuillEditor === 'function') {
                const editors = form.querySelectorAll('[data-quill-editor]:not(.quill-initialized)');
                editors.forEach(editor => {
                    window.initQuillEditor(editor.id);
                    editor.classList.add('quill-initialized');
                });
            }
        }
    });
</script>
@model MemberViewModel

@{
    ViewData["Title"] = "Team Members";
}

<div class="pt-3">
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3">
        <h1 class="h2">Team Members</h1>
        <div class="btn-toolbar">
            <button href="#"
                    data-bs-toggle="modal"
                    data-bs-target="#addUserModal"
                    type="button"
                    class="btn btnAdd me-2 w-100">
                + Team Member
            </button>
        </div>
    </div>

    @if (ViewBag.SuccessMessage != null)
    {
        <div class="alert alert-success">
            @ViewBag.SuccessMessage
        </div>
    }

    @if (ViewBag.ErrorMessage != null)
    {
        <div class="alert alert-danger">
            @ViewBag.ErrorMessage
        </div>
    }

    <div class="row g-4">
        @if (Model.Users != null && Model.Users.Any())
        {
            foreach (var user in Model.Users)
            {
                <div class="col-12 col-md-6 col-lg-4 col-xl-3">
                    <div class="card shadow-sm h-100 rounded-4" data-user-id="@user.Id" style="cursor: pointer;">
                        <div class="card-body">
                            <div class="mb-3">
                                <div class="d-flex justify-content-between">
                                    <div class="dropdown ms-auto">
                                        <button class="btn btn-sm btn-link text-muted p-0"
                                                type="button"
                                                data-bs-toggle="dropdown"
                                                aria-expanded="false"
                                                onclick="event.stopPropagation();">
                                            <svg xmlns="http://www.w3.org/2000/svg"
                                                 width="20"
                                                 height="20"
                                                 fill="currentColor"
                                                 class="bi bi-three-dots-vertical"
                                                 viewBox="0 0 16 16">
                                                <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
                                            </svg>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end shadow-sm">
                                            <li>
                                                <a class="dropdown-item" href="#" onclick="openEditUserModal('@user.Id')">
                                                    <i class="bi bi-pencil me-2"></i>Edit Member
                                                </a>
                                            </li>
                                            <li><hr class="dropdown-divider" /></li>
                                            <li>
                                                <form asp-action="Delete" method="post" class="d-inline">
                                                    @Html.AntiForgeryToken()
                                                    <input type="hidden" name="id" value="@user.Id" />
                                                    <button type="submit" class="dropdown-item text-danger">
                                                        <i class="bi bi-trash me-2"></i>Delete Member
                                                    </button>
                                                </form>
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                                <div class="d-flex justify-content-center">
                                    <img src="@(string.IsNullOrEmpty(user.AvatarUrl) ? "/images/member-template-1.svg" : user.AvatarUrl)"
                                         alt="@user.FirstName @user.LastName"
                                         class="rounded-circle"
                                         style="width: 100px; height: 100px; object-fit: cover;" />
                                </div>
                            </div>
                            <div class="text-center">
                                <h4>@user.FirstName @user.LastName</h4>
                                <div class="mb-3">
                                    <small class="d-block mb-1">
                                        <i class="bi bi-envelope-fill me-1"></i>@user.Email
                                    </small>
                                    @if (!string.IsNullOrEmpty(user.PhoneNumber))
                                    {
                                        <small class="d-block">
                                            <i class="bi bi-telephone-fill me-1"></i>
                                            @user.PhoneNumber
                                        </small>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12">
                <div class="card shadow-sm rounded-4 text-center p-5">
                    <div class="card-body">
                        <i class="bi bi-people display-4 text-muted mb-3"></i>
                        <h3>No Team Members Found</h3>
                        <p class="text-muted">Start by adding your first team member</p>
                        <button data-bs-toggle="modal" data-bs-target="#addUserModal"
                                class="btn btnAdd mt-3">
                            + Team Member
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>


@await Html.PartialAsync("_CreateUserPartial", Model)
@await Html.PartialAsync("_EditUserPartial", Model)
@await Html.PartialAsync("_UserDetailsPartial", Model)


@section Scripts {
    <script>
        function createRipple(event) {
            const button = event.currentTarget;
            const ripple = button.querySelector(".ripple");
            if (ripple) {
                ripple.remove();
            }

            const circle = document.createElement("span");
            const diameter = Math.max(button.clientWidth, button.clientHeight);
            const radius = diameter / 2;

            const rect = button.getBoundingClientRect();
            circle.style.width = circle.style.height = `${diameter}px`;
            circle.style.left = `${event.clientX - rect.left - radius}px`;
            circle.style.top = `${event.clientY - rect.top - radius}px`;
            circle.classList.add("ripple");

            button.appendChild(circle);
        }

        document.addEventListener("DOMContentLoaded", () => {
            const buttons = document.querySelectorAll(
                ".btnAuth, .btnAdd, .btnGoogle, .btn-editor, .btn"
            );

            buttons.forEach((button) => {
                button.classList.add("ripple-button");
                button.addEventListener("mousedown", createRipple);
            });

            const userCards = document.querySelectorAll('.card');
            userCards.forEach(card => {
                card.addEventListener('click', function() {
                    const userId = this.getAttribute('data-user-id');
                    if (userId) {
                        openUserDetails(userId);
                    }
                });
            });
        });
    </script>
}

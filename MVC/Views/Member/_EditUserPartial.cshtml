@model MemberViewModel
@{
    ViewData["Title"] = "Edit Team Member";
}

<div class="modal fade"
     id="editUserModal"
     tabindex="-1"
     aria-labelledby="editUserModalLabel"
     aria-hidden="true"
     data-bs-backdrop="static"
     data-bs-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header border-0 position-absolute w-100">
                <button type="button"
                        class="btn-close"
                        data-bs-dismiss="modal"
                        aria-label="Close"
                        onclick="resetEditModalForm()"></button>
            </div>
            <div class="text-center my-5 px-3">
                <h1 class="modal-title px-3 text-center" id="editUserModalLabel">
                    Edit Team Member
                </h1>
            </div>
            <div class="modal-body bg-white">
                <div class="container-fluid px-4 bg-white">
                    <form asp-action="Edit" asp-controller="Member" method="post" id="editUserForm" enctype="multipart/form-data">
                        @Html.AntiForgeryToken()
                        <input type="hidden" id="editUserId" name="Form.Id" />
                        
                        <div class="mb-4 text-center">
                            <div class="position-relative d-inline-block" id="editDropArea">
                                <div class="rounded-circle bg-light d-flex align-items-center justify-content-center"
                                     style="width: 120px; height: 120px; overflow: hidden;">
                                    <div id="editDefaultUserImage" class="d-flex align-items-center justify-content-center w-100 h-100">
                                        <i class="bi bi-person-fill text-secondary" style="font-size: 3rem;"></i>
                                    </div>
                                    <img id="editImagePreview" src="#" alt="Preview" class="d-none img-fluid" style="width: 100%; height: 100%; object-fit: cover;" />
                                </div>
                                <div id="editCameraOverlay" class="position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center rounded-circle bg-dark bg-opacity-50" style="opacity: 0; transition: opacity 0.2s;">
                                    <i class="bi bi-camera text-white fs-4"></i>
                                </div>
                                <input type="file" id="editUserImage" name="UserImage" accept="image/*" class="position-absolute top-0 start-0 w-100 h-100 opacity-0" style="cursor: pointer;" />
                            </div>
                            <p class="small text-muted mt-2">Click to upload profile picture</p>
                        </div>

                        <div class="row mb-3">
                            <div class="col">
                                <label for="editFirstName" class="form-label">First Name</label>
                                <input type="text"
                                       name="Form.FirstName"
                                       class="form-control formBorder"
                                       id="editFirstName"
                                       placeholder="Enter first name" />
                                <span class="text-danger field-validation-error" id="editFirstNameError"></span>
                            </div>
                            <div class="col">
                                <label for="editLastName" class="form-label">Last Name</label>
                                <input type="text"
                                       name="Form.LastName"
                                       class="form-control formBorder"
                                       id="editLastName"
                                       placeholder="Enter last name" />
                                <span class="text-danger field-validation-error" id="editLastNameError"></span>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="editEmail" class="form-label">Email Address</label>
                            <input type="email"
                                   name="Form.Email"
                                   class="form-control formBorder"
                                   id="editEmail"
                                   placeholder="Enter email address" />
                            <span class="text-danger field-validation-error" id="editEmailError"></span>
                        </div>

                        <div class="mb-3">
                            <label for="editPhoneNumber" class="form-label">Phone Number</label>
                            <input type="tel"
                                   name="Form.PhoneNumber"
                                   class="form-control formBorder"
                                   id="editPhoneNumber"
                                   placeholder="Enter phone number" />
                            <span class="text-danger field-validation-error" id="editPhoneError"></span>
                        </div>

                        <div class="mb-3">
                            <label for="editPassword" class="form-label">Password</label>
                            <input type="password"
                                   name="Form.Password"
                                   class="form-control formBorder"
                                   id="editPassword"
                                   placeholder="Enter password" />
                            <span class="text-danger field-validation-error" id="editPasswordError"></span>
                        </div>

                        <div class="mb-3">
                            <label for="editConfirmPassword" class="form-label">Confirm Password</label>
                            <input type="password"
                                   name="Form.ConfirmPassword"
                                   class="form-control formBorder"
                                   id="editConfirmPassword"
                                   placeholder="Confirm password" />
                            <span class="text-danger field-validation-error" id="editConfirmPasswordError"></span>
                        </div>

                        <input type="hidden" name="Form.TermsAndCondition" id="editTermsAndCondition" value="true" />
                        <input type="hidden" name="Form.AvatarUrl" id="editCurrentAvatarUrl" />

                        <div class="d-flex justify-content-center mb-4">
                            <button type="submit" class="btnAuth">Update Team Member</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const editDropArea = document.getElementById('editDropArea');
        const editUserImageInput = document.getElementById('editUserImage');
        
        if (editDropArea) {
            ['dragenter', 'dragover'].forEach(eventName => {
                editDropArea.addEventListener(eventName, highlightEdit, false);
            });

            ['dragleave', 'drop'].forEach(eventName => {
                editDropArea.addEventListener(eventName, unhighlightEdit, false);
            });

            editDropArea.addEventListener('drop', handleEditDrop, false);
            editDropArea.addEventListener('click', function() {
                editUserImageInput.click();
            });
        }

        if (editUserImageInput) {
            editUserImageInput.addEventListener('change', function() {
                if (this.files && this.files[0]) {
                    handleEditImageFile(this.files[0]);
                }
            });
        }

        $('#editUserModal').on('hidden.bs.modal', function () {
            resetEditModalForm();
        });

        $('#editUserForm').on('submit', function(e) {
            if (!validateEditUserForm()) {
                e.preventDefault();
                e.stopPropagation();
            }
        });
    });

    function validateEditUserForm() {
        clearEditValidationErrors();
        let isValid = true;

        const firstNameField = document.getElementById('editFirstName');
        if (!firstNameField.value.trim()) {
            showEditError(firstNameField, 'First name is required');
            isValid = false;
        }

        const lastNameField = document.getElementById('editLastName');
        if (!lastNameField.value.trim()) {
            showEditError(lastNameField, 'Last name is required');
            isValid = false;
        }

        const emailField = document.getElementById('editEmail');
        if (!emailField.value.trim()) {
            showEditError(emailField, 'Email address is required');
            isValid = false;
        } else if (!isValidEmail(emailField.value)) {
            showEditError(emailField, 'Please enter a valid email address');
            isValid = false;
        }

        const phoneField = document.getElementById('editPhoneNumber');
        if (!phoneField.value.trim()) {
            showEditError(phoneField, 'Phone number is required');
            isValid = false;
        }

        const passwordField = document.getElementById('editPassword');
        if (passwordField.value.trim() && passwordField.value.length < 8) {
            showEditError(passwordField, 'Password must be at least 8 characters');
            isValid = false;
        }

        const confirmField = document.getElementById('editConfirmPassword');
        if (passwordField.value.trim() && confirmField.value !== passwordField.value) {
            showEditError(confirmField, 'Passwords do not match');
            isValid = false;
        }

        return isValid;
    }

    function showEditError(inputElement, message) {
        inputElement.classList.add('is-invalid');
        const errorSpan = inputElement.nextElementSibling;
        if (errorSpan && errorSpan.classList.contains('field-validation-error')) {
            errorSpan.textContent = message;
        }
    }

    function clearEditValidationErrors() {
        const errorElements = document.querySelectorAll('#editUserForm .field-validation-error');
        errorElements.forEach(el => {
            el.textContent = '';
        });

        const invalidInputs = document.querySelectorAll('#editUserForm .is-invalid');
        invalidInputs.forEach(input => {
            input.classList.remove('is-invalid');
        });
    }

    function handleEditImageFile(file) {
        console.log('handleEditImageFile called with file:', file ? file.name : 'no file');
        if (file) {
            if (file.size > 5 * 1024 * 1024) {
                alert('File size should not exceed 5MB');
                return;
            }

            const reader = new FileReader();
            reader.onload = function(e) {
                const defaultImg = document.getElementById('editDefaultUserImage');
                const previewImg = document.getElementById('editImagePreview');
                
                if (defaultImg) defaultImg.style.display = 'none';
                if (previewImg) {
                    previewImg.classList.remove('d-none');
                    previewImg.src = e.target.result;
                }
            };
            reader.readAsDataURL(file);
        }
    }

    function resetEditModalForm() {
        const form = document.getElementById('editUserForm');
        if (form) form.reset();

        clearEditValidationErrors();
        const defaultImg = document.getElementById('editDefaultUserImage');
        const previewImg = document.getElementById('editImagePreview');

        if (defaultImg) defaultImg.style.display = 'block';
        if (previewImg) {
            previewImg.classList.add('d-none');
            previewImg.src = '';
        }

        console.log('Edit form reset complete');
    }

    function preventEditDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }

    function highlightEdit() {
        const dropArea = document.getElementById('editDropArea');
        const cameraOverlay = document.getElementById('editCameraOverlay');

        if (dropArea) dropArea.classList.add('bg-light');
        if (cameraOverlay) cameraOverlay.style.opacity = '1';
    }

    function unhighlightEdit() {
        const dropArea = document.getElementById('editDropArea');
        const cameraOverlay = document.getElementById('editCameraOverlay');

        if (dropArea) dropArea.classList.remove('bg-light');
        if (cameraOverlay) cameraOverlay.style.opacity = '0';
    }

    function handleEditDrop(e) {
        preventEditDefaults(e);
        const dt = e.dataTransfer;
        const files = dt.files;
        if (files.length && files[0].type.startsWith('image/')) {
            handleEditImageFile(files[0]);
            document.getElementById('editUserImage').files = files;
        }
    }

    function openEditUserModal(userId) {
        fetch(`/Member/GetUserById?id=${userId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(user => {
                document.getElementById('editUserId').value = user.id;
                document.getElementById('editFirstName').value = user.firstName || '';
                document.getElementById('editLastName').value = user.lastName || '';
                document.getElementById('editEmail').value = user.email || '';
                document.getElementById('editPhoneNumber').value = user.phoneNumber || '';
                document.getElementById('editCurrentAvatarUrl').value = user.avatarUrl || '';

                const defaultImg = document.getElementById('editDefaultUserImage');
                const previewImg = document.getElementById('editImagePreview');

                if (user.avatarUrl && user.avatarUrl !== '/images/member-template-1.svg') {
                    if (defaultImg) defaultImg.style.display = 'none';
                    if (previewImg) {
                        previewImg.classList.remove('d-none');
                        previewImg.src = user.avatarUrl;
                    }
                } else {
                    if (defaultImg) defaultImg.style.display = 'block';
                    if (previewImg) {
                        previewImg.classList.add('d-none');
                        previewImg.src = '#';
                    }
                }

                $('#editUserModal').modal('show');
            })
            .catch(error => {
                console.error('Error fetching user details:', error);
                alert('Failed to load user details. Please try again.');
            });
    }
</script>